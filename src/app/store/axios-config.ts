// src/app/core/axios-config.ts
import axios, { AxiosRequestConfig } from 'axios';
import { environment } from '../../environments/environment';
import * as AuthActions from '../features/auth/store/auth.actions';
import { selectAuthToken } from '../features/auth/store/auth.selectors';
import { firstValueFrom, take } from 'rxjs';
import { Token } from '../features/auth/models/auth.model';

// Variables globales pour la gestion du refresh
let isRefreshing = false;
let isRedirecting = false;
let refreshPromise: Promise<Token | null> | null = null;
let requestsQueue: Array<{
  resolve: (token: Token | null) => void;
  reject: (error: any) => void;
}> = [];

// Constantes
const TOKEN_EXPIRY_BUFFER = 0 * 60 * 1000; // 5 minutes en millisecondes
const EXCLUDED_ENDPOINTS = ['auth/login', 'users'];
const TOKEN_STORAGE_KEY = 'auth_token';

export function configureAxios(store: any) {
  axios.defaults.baseURL = environment.apiUrl;

  // Intercepteur de requ√™te
  axios.interceptors.request.use(async config => {
    try {
      // V√©rifier si l'endpoint est exclu
      if (shouldExcludeEndpoint(config.url || '', config.method || '')) {
        return config;
      }

      // R√©cup√©rer le token actuel
      let token = await getCurrentToken(store);
      
      if (!token?.access_token) {
        return config;
      }

      // V√©rifier si le token doit √™tre rafra√Æchi
      if (shouldRefreshToken(token)) {
        token = await handleTokenRefresh(store, token);
      }

      // Ajouter le token √† la requ√™te
      if (token?.access_token) {
        config.headers = config.headers || {};
        config.headers.Authorization = `Bearer ${token.access_token}`;
      }

      return config;
    } catch (error) {
      console.warn('Erreur dans l\'intercepteur de requ√™te:', error);
      return config;
    }
  });

  // Intercepteur de r√©ponse
  axios.interceptors.response.use(
    response => response,
    async error => {
      if (error.response?.status === 401 && !isRedirecting) {
        await handleUnauthorizedError(store);
      }
      return Promise.reject(error);
    }
  );
}

/**
 * V√©rifie si l'endpoint doit √™tre exclu du syst√®me de token
 */
function shouldExcludeEndpoint(url: string, method: string): boolean {
  // Exclure auth/login pour toutes les m√©thodes
  if (url.includes('auth/login')) {
    return true;
  }
  
  // Exclure POST users sp√©cifiquement
  if (method.toUpperCase() === 'POST' && url.match(/\/users\/?$/)) {
    return true;
  }
  
  return false;
}

/**
 * R√©cup√®re le token actuel depuis le store ou localStorage
 */
async function getCurrentToken(store: any): Promise<Token | null> {
  try {
    // Essayer depuis le store Redux
    const storeToken: Token = await firstValueFrom(
      store.select(selectAuthToken).pipe(take(1))
    );
    
    if (storeToken?.access_token) {
      console.log('Token r√©cup√©r√© depuis le store Redux');
      return storeToken;
    }

    // Fallback sur localStorage
    const storageToken = getTokenFromStorage();
    if (storageToken?.access_token) {
      console.log('Token r√©cup√©r√© depuis localStorage');
      return storageToken;
    }

    return null;
  } catch (error) {
    console.warn('Erreur lors de la r√©cup√©ration du token depuis le store:', error);
    return getTokenFromStorage();
  }
}

/**
 * R√©cup√®re le token depuis localStorage
 */
function getTokenFromStorage(): Token | null {
  try {
    const storedToken = localStorage.getItem(TOKEN_STORAGE_KEY);
    if (!storedToken) return null;

    const token: Token = JSON.parse(storedToken);
    
    // V√©rifier que c'est bien un objet Token valide
    if (token.access_token && token.refresh_token) {
      return token;
    }
    
    return null;
  } catch (error) {
    console.warn('Erreur lors de la lecture du token depuis localStorage:', error);
    return null;
  }
}

/**
 * V√©rifie si le token doit √™tre rafra√Æchi (5 minutes avant expiration)
 */
function shouldRefreshToken(token: Token): boolean {
  if (!token.expires_in) return false;
  
  // Calculer le timestamp de cr√©ation du token depuis le JWT
  const tokenCreationTime = getTokenCreationTime(token.access_token);
  if (!tokenCreationTime) return false;

  const expirationTime = tokenCreationTime + (token.expires_in * 1000);
  const currentTime = Date.now();
  const timeUntilExpiry = expirationTime - currentTime;
  
  // Rafra√Æchir si le token expire dans moins de 5 minutes
  return timeUntilExpiry <= TOKEN_EXPIRY_BUFFER && timeUntilExpiry > 0;
}

/**
 * V√©rifie si le token est expir√©
 */
function isTokenExpired(token: Token): boolean {
  if (!token.expires_in) return false;
  
  const tokenCreationTime = getTokenCreationTime(token.access_token);
  if (!tokenCreationTime) return true;

  const expirationTime = tokenCreationTime + (token.expires_in * 1000);
  return Date.now() >= expirationTime;
}

/**
 * Extrait le timestamp de cr√©ation depuis le JWT
 */
function getTokenCreationTime(accessToken: string): number | null {
  try {
    // D√©coder le JWT pour extraire le timestamp 'iat' (issued at)
    const payload = JSON.parse(atob(accessToken.split('.')[1]));
    return payload.iat ? payload.iat * 1000 : null; // Convertir en millisecondes
  } catch (error) {
    console.warn('Impossible de d√©coder le JWT:', error);
    return null;
  }
}

/**
 * V√©rifie la validit√© globale d'un token
 */
function checkTokenValidity(token: Token): boolean {
  return !!(
    token?.access_token &&
    token?.refresh_token &&
    !isTokenExpired(token)
  );
}

/**
 * Sauvegarde le token directement dans localStorage
 */
function saveTokenWithTimestamp(token: Token): void {
  try {
    localStorage.setItem(TOKEN_STORAGE_KEY, JSON.stringify(token));
    console.log('Token sauvegard√© dans localStorage');
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du token:', error);
  }
}

/**
 * G√®re le rafra√Æchissement du token avec file d'attente
 */
async function handleTokenRefresh(store: any, currentToken: Token): Promise<Token | null> {
  // Si un refresh est d√©j√† en cours, attendre le r√©sultat
  if (isRefreshing && refreshPromise) {
    return new Promise((resolve, reject) => {
      requestsQueue.push({ resolve, reject });
    });
  }

  // Marquer le d√©but du refresh
  isRefreshing = true;
  refreshPromise = performTokenRefresh(store, currentToken);

  try {
    const newToken = await refreshPromise;
    
    // R√©soudre toutes les requ√™tes en attente
    requestsQueue.forEach(({ resolve }) => resolve(newToken));
    requestsQueue = [];
    
    return newToken;
  } catch (error) {
    // Rejeter toutes les requ√™tes en attente
    requestsQueue.forEach(({ reject }) => reject(error));
    requestsQueue = [];
    
    throw error;
  } finally {
    isRefreshing = false;
    refreshPromise = null;
  }
}

/**
 * Effectue le rafra√Æchissement du token
 */
async function performTokenRefresh(store: any, currentToken: Token): Promise<Token | null> {
  try {
    console.log('üîÑ Rafra√Æchissement du token en cours...');

    // Pr√©parer la requ√™te de refresh selon votre API
    const refresh_token = currentToken.refresh_token;
    console.log("New token: ", refresh_token);

    const response = await axios.post('auth/refresh-token', {refresh_token}, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log("New token: ", response);

    const newToken: Token = response.data;

    
    // Valider le nouveau token
    if (!newToken.access_token || !newToken.refresh_token) {
      throw new Error('Token rafra√Æchi invalide - Champs manquants');
    }

    // V√©rifier la validit√© du nouveau token
    if (!checkTokenValidity(newToken)) {
      throw new Error('Token rafra√Æchi invalide - Token expir√©');
    }

    // Sauvegarder le nouveau token
    saveTokenWithTimestamp(newToken);
    
    // Mettre √† jour le store Redux
    store.dispatch(AuthActions.setToken({ token: newToken }));
    
    console.log('‚úÖ Token rafra√Æchi avec succ√®s');
    return newToken;
  } catch (error) {
    console.error('‚ùå Erreur lors du rafra√Æchissement du token:', error);
    
    // En cas d'erreur, d√©connecter l'utilisateur
    await handleRefreshFailure(store);
    return null;
  }
}

/**
 * G√®re l'√©chec du rafra√Æchissement
 */
async function handleRefreshFailure(store: any): Promise<void> {
  console.log('üö™ √âchec du rafra√Æchissement du token - D√©connexion automatique');
  
  // Nettoyer le stockage
  localStorage.removeItem(TOKEN_STORAGE_KEY);
  
  // D√©connecter via le store Redux
  store.dispatch(AuthActions.logout());
  
  // Optionnel : redirection vers la page de login
  // setTimeout(() => {
  //   window.location.href = '/login';
  // }, 100);
}

/**
 * G√®re les erreurs 401 (non autoris√©)
 */
async function handleUnauthorizedError(store: any): Promise<void> {
  if (isRedirecting) return;
  
  isRedirecting = true;
  
  try {
    const currentToken = await getCurrentToken(store);
    
    if (currentToken?.refresh_token && !isRefreshing) {
      console.log('üîÑ Tentative de r√©cup√©ration avec refresh token...');
      
      // Essayer de rafra√Æchir le token
      const newToken = await handleTokenRefresh(store, currentToken);
      
      if (!newToken) {
        await handleRefreshFailure(store);
      }
    } else {
      console.log('‚ùå Pas de refresh token disponible');
      await handleRefreshFailure(store);
    }
  } catch (error) {
    console.error('Erreur lors de la gestion de l\'erreur 401:', error);
    await handleRefreshFailure(store);
  } finally {
    // R√©initialiser le flag apr√®s un d√©lai
    setTimeout(() => {
      isRedirecting = false;
    }, 1000);
  }
}

/**
 * Obtient le temps restant avant expiration (en millisecondes)
 */
function getTimeUntilExpiration(token: Token): number {
  if (!token.expires_in) return 0;
  
  const tokenCreationTime = getTokenCreationTime(token.access_token);
  if (!tokenCreationTime) return 0;

  const expirationTime = tokenCreationTime + (token.expires_in * 1000);
  const timeRemaining = expirationTime - Date.now();
  
  return Math.max(0, timeRemaining);
}

// Export des fonctions utilitaires pour usage externe
export {
  saveTokenWithTimestamp,
  checkTokenValidity,
  isTokenExpired,
  shouldRefreshToken,
  getTimeUntilExpiration,
  getTokenCreationTime
};